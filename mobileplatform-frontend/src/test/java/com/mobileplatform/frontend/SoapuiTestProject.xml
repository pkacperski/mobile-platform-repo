<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="5bc24e4d-bf1c-472d-ba02-964da0c0a6e6" activeEnvironment="Default" name="Mobile Platform - Frontend" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="a7e8e4f9-84ab-436b-827a-fe8a33c8c0ac" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9090" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9090</con:endpoint></con:endpoints><con:resource name="" path="/api/test" id="a6a7ad21-15f8-4aff-81be-4a31cc7b6014"><con:settings/><con:parameters/><con:method name="GET" id="26d447c9-692d-4af5-a538-5d23ccb9f39e" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:test="http://localhost/api/test">test:Response</con:element></con:representation><con:request name="getAllRequest" id="f2514202-eafd-4b24-aceb-a541deb4b39f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9090</con:endpoint><con:request/><con:originalUri>http://localhost/api/test</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST" id="6c95050c-740b-4123-a10a-bcca7207c70e" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:test="http://localhost/api/test">test:Response</con:element></con:representation><con:request name="addNewRequest" id="fbeaf647-34ce-48b6-8666-3b9c665658a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9090</con:endpoint><con:request>{"name":"string"}</con:request><con:originalUri>http://localhost/api/test</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="a86442d6-51bd-4f38-b741-4a38208764aa" name="Test suite - frontend"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase id="1156a47d-9b1e-4065-bcf3-cf346e22b482" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getAllObjects test case" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="getAllRequest" id="2768a5ee-acdb-4000-a38d-a9b5b46ce8f4"><con:settings/><con:config service="http://localhost:9090" resourcePath="/api/test" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getAllRequest" id="f2514202-eafd-4b24-aceb-a541deb4b39f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9090</con:endpoint><con:request/><con:originalUri>http://localhost/api/test</con:originalUri><con:assertion type="Simple Contains" id="712e4a78-f8e6-46ad-88bd-0f457f6ef229" name="Contains"><con:configuration><token>"name": "string"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="8de52e8f-1e9a-406d-91a4-0284c8c6af5c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="dadd54c7-a47b-43a0-9203-4ffbfda915a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addNewObject test case" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="addNewObjectRequest" id="2f6cf5c6-7da9-4cc9-96d6-2396b3f6c2f9"><con:settings/><con:config service="http://localhost:9090" resourcePath="/api/test" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="addNewObjectRequest" id="fbeaf647-34ce-48b6-8666-3b9c665658a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9090</con:endpoint><con:request>{"name":"string"}</con:request><con:originalUri>http://localhost/api/test</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0bfa571e-857f-421a-b5e8-cbb7fcb5781a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="af643926-8ca8-449e-b334-b96cf7dc2a09" name="Contains"><con:configuration><token>"name": "string"</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="62aabff9-ea59-4825-a06e-98e37ace1be9" port="9090" path="/" host="DESKTOP-BDPDOH2" name="Frontend REST mock"><con:settings/><con:properties/><con:restMockAction name="Add new object" method="POST" resourcePath="/api/test" id="5cf79e8a-9720-4277-910b-28045c1fbe5f"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Successful" id="aefcf2bb-96c4-4a5a-83f4-53d32a4e2e1e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "id": 4,
  "name": "string"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Get all objects" method="GET" resourcePath="/api/test" id="ec8fc0e3-b496-4f8d-bccb-fe09bd276f8f"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="All objects" id="3b95d676-c02c-49d2-8374-148ac2ae7e19" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
  {
    "id": 1,
    "name": "test"
  },
  {
    "id": 2,
    "name": "test"
  },
  {
    "id": 3,
    "name": "string"
  }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="Get object with id=1 path param" method="GET" resourcePath="/api/test/1" id="ef52e690-0565-42c1-9434-b7a934ee7176"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="Object with id=1" id="1413d3b1-cabc-49b5-b36e-6f177e17251b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id":1,
	"name":"test"	
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="WIP Get object with id=3 request(query) param" method="GET" resourcePath="/api/test/query?id=3" id="5574dd16-474c-4def-8b81-e9d210249209"><con:settings/><con:defaultResponse>Object with id=3</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath/><con:response name="Object with id=3 (see https://community.smartbear.com/t5/ReadyAPI-Questions/REST-Mocking-with-Query-Parametr/td-p/97939)" id="c7624125-7dc6-4993-995a-79e45a67af51" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script/><con:responseContent>{
	"id":3,
	"name":"string"	
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>